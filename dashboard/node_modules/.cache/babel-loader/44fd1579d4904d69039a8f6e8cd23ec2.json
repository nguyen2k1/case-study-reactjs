{"ast":null,"code":"import { USER_LIST_FAIL, USER_LIST_REQUEST, USER_LIST_RESET, USER_LIST_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT } from \"../Constants/UserContants\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { URL } from \"../Url\";\n\n// LOGIN\nexport const login = (email, password) => async dispatch => {\n  const ToastObjects = {\n    pauseOnFocusLoss: false,\n    draggable: false,\n    pauseOnHover: false,\n    autoClose: 2000\n  };\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const {\n      data\n    } = await axios.post(`${URL}/api/users/login`, {\n      email,\n      password\n    }, config);\n    if (!data.isAdmin === true) {\n      toast.error(\"You are not Admin\", ToastObjects);\n      dispatch({\n        type: USER_LOGIN_FAIL\n      });\n    } else {\n      dispatch({\n        type: USER_LOGIN_SUCCESS,\n        payload: data\n      });\n    }\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: message\n    });\n  }\n};\n\n// LOGOUT\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n};\n\n// ALL USER\nexport const listUser = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`${URL}/api/users`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    if (message === \"Not authorized, token failed\") {\n      dispatch(logout());\n    }\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"names":["USER_LIST_FAIL","USER_LIST_REQUEST","USER_LIST_RESET","USER_LIST_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","axios","toast","URL","login","email","password","dispatch","ToastObjects","pauseOnFocusLoss","draggable","pauseOnHover","autoClose","type","config","headers","data","post","isAdmin","error","payload","localStorage","setItem","JSON","stringify","message","response","logout","removeItem","listUser","getState","userLogin","userInfo","Authorization","token","get"],"sources":["D:/react JS/RJ2303R1/TMDT/dashboard/src/Redux/Actions/userActions.js"],"sourcesContent":["import {\r\n  USER_LIST_FAIL,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_RESET,\r\n  USER_LIST_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n} from \"../Constants/UserContants\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { URL } from \"../Url\";\r\n\r\n// LOGIN\r\nexport const login = (email, password) => async (dispatch) => {\r\n  const ToastObjects = {\r\n    pauseOnFocusLoss: false,\r\n    draggable: false,\r\n    pauseOnHover: false,\r\n    autoClose: 2000,\r\n  };\r\n  try {\r\n    dispatch({ type: USER_LOGIN_REQUEST });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(\r\n      `${URL}/api/users/login`,\r\n      { email, password },\r\n      config\r\n    );\r\n\r\n    if (!data.isAdmin === true) {\r\n      toast.error(\"You are not Admin\", ToastObjects);\r\n      dispatch({\r\n        type: USER_LOGIN_FAIL,\r\n      });\r\n    } else {\r\n      dispatch({ type: USER_LOGIN_SUCCESS, payload: data });\r\n    }\r\n\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n\r\n// LOGOUT\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem(\"userInfo\");\r\n  dispatch({ type: USER_LOGOUT });\r\n  dispatch({ type: USER_LIST_RESET });\r\n};\r\n\r\n// ALL USER\r\nexport const listUser = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({ type: USER_LIST_REQUEST });\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(`${URL}/api/users`, config);\r\n\r\n    dispatch({ type: USER_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    if (message === \"Not authorized, token failed\") {\r\n      dispatch(logout());\r\n    }\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload: message,\r\n    });\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}